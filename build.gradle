plugins {
    id 'java'
}

group 'me.lab6'
version 'FIN'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
}

test {
    useJUnitPlatform()
}

tasks.register('serverJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output) { include "**" }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'me.lab6.server.ServerMain'
    }
    destinationDirectory = file("$rootDir/jar/server")
    archivesBaseName = "lab6"
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

tasks.register('clientJar', Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output) { include "**" }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'me.lab6.client.ClientMain'
    }
    destinationDirectory = file("$rootDir/jar/client")
    archivesBaseName = "lab6"
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
